#include "Terrain.h"
#include "mymath.h"

Terrain::Terrain(void)
{
	numCellsX = 100;
	numCellsZ = 100;
	cellSize = 1.0f;

	heights = new float[(numCellsX + 1) * (numCellsZ + 1)];

	for(int x = 0; x < numCellsX + 1; x++)
		for(int z = 0; z < numCellsZ + 1; z++)
		{
			float fx = PI - 2 * PI * x / 100.0;
			float fz = PI - 2 * PI * z / 100.0f;
			heights[x + z * (numCellsX + 1)] = 3.0 * sin(fx*fz);
		}
}

Terrain::~Terrain(void)
{
}


void Terrain::Draw()
{
	glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	glBegin(GL_TRIANGLES);
	for(int x = 0; x < numCellsX; x++)
		for(int z = 0; z < numCellsZ; z++)
		{
			Vector3f a(x, heights[x + z * (numCellsX + 1)], z), 
				     b(x + 1, heights[(x + 1) + z * (numCellsX + 1)], z),
					 c(x + 1, heights[(x + 1) + z * (numCellsX + 1)], z);
			Vector3f ac = c-a;
			Vector3f ab = b-a;
			Vector3f n = ac.Cross(ab);
			n.Normalize();

			glNormal3f(n.x, n.y, n.z);
			glVertex3f(x, heights[x + z * (numCellsX + 1)], z);
			glVertex3f(x + 1, heights[(x + 1) + z * (numCellsX + 1)], z);
			glVertex3f(x + 1, heights[(x + 1) + z * (numCellsX + 1)], z);

			a = Vector3f(x, heights[x + z * (numCellsX + 1)], z);
			b = Vector3f(x + 1, heights[(x + 1) + (z + 1) * (numCellsX + 1)], z + 1);
			c = Vector3f(x, heights[x + (z + 1) * (numCellsX + 1)], z + 1);
			ac = c-a;
			ab = b-a;
			n = ac.Cross(ab);
			n.Normalize();

			glNormal3f(n.x, n.y, n.z);
			glVertex3f(x, heights[x + z * (numCellsX + 1)], z);
			glVertex3f(x + 1, heights[(x + 1) + (z + 1) * (numCellsX + 1)], z + 1);
			glVertex3f(x, heights[x + (z + 1) * (numCellsX + 1)], z + 1);

		}
	glEnd();
}